%feature("docstring") OTAGRUM::ContinuousPC
"ContinuousPC learner

Parameters
----------
data : 2-d sequence of float
    The data
maxConditioningSetSize : int, optional
    The maximum conditioning set for independecy test
alpha : float
    Hypothesis test threshold"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::PDAGtoDot
"Convert PDAG graph to dot

Parameters
----------
pdag : :py:class:`pyAgrum.MixedGraph`
    dag

Returns
-------
dot : str
    Dot format representation"


// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::skeletonToDot
"Convert skeleton graph to dot

Parameters
----------
pdag : :py:class:`pyAgrum.UndiGraph`
    dag

Returns
-------
dot : str
    Dot format representation"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::learnSkeleton
"Skeleton learner

Returns
-------
gum::UndiGraph : :py:class:`pyAgrum.UndiGraph`
    the skeleton"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::learnPDAG
"PDAG leaner

Returns
-------
gum::MixedGraph : :py:class:`pyAgrum.MixedGraph`
    the PDAG"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::learnJunctionTree
"Learn junction tree.

Returns
-------
njt : :class:`~otagrum.NamedJunctionTree`
    Junction tree"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::learnDAG
"Learn DAG.

Returns
-------
dag : :class:`~otagrum.NamedDAG`
    DAG"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::deriveMoralGraph
"Derive moral graph.

Parameters
----------
g : :py:class:`pyAgrum.MixedGraph`
    g

Returns
-------
moral_graph : :py:class:`pyAgrum.UndiGraph`
    Moral graph."

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::deriveDAG
"Derive DAG.

Parameters
----------
p : :py:class:`pyAgrum.MixedGraph`
    p

Returns
-------
junction_tree : :py:class:`pyAgrum.DAG`
    DAG"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::deriveJunctionTree
"Derive Junction Tree.

Parameters
----------
g : :py:class:`pyAgrum.UndiGraph`
    g

Returns
-------
junction_tree : :py:class:`pyAgrum.JunctionTree`
    Junction Tree"

// ----------------------------------------------------------------------------



%feature("docstring") OTAGRUM::ContinuousPC::getPValue
"P-Value accessor

Parameters
----------
x : int
    Node id
y : int
    Node id

Returns
-------
p_value : float
    P-Value"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::getSepsetNames
"Sep names accessor.

Returns
-------
sepset_names : :py:class:`openturns.Description`
    Separator set names"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::getSepset
"Sep indices

Parameters
----------
x : int
    Node id
y : int
    Node id

Returns
-------
sep_set : :py:class:`openturns.Indices`
    Indices"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::getTTest
"Test statistics accessor

Parameters
----------
x : int
    Node id
y : int
    Node id

Returns
-------
ttest : float
    Test statistics"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::setVerbosity
"Verbosity flag accessor

Parameters
----------
verbose : bool
    Verbosity flag value"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::getVerbosity
"Verbosity flag accessor

Returns
-------
verbose : bool
    Verbosity flag value"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::getTrace
"Trace accessor.

Returns
-------
trace : :py:class:`openturns.Description`
    Trace"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::idFromName
"ID accessor.

Parameters
----------
n : str
    Name

Returns
-------
id : int
    ID"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousPC::isRemoved
"Test if an arc is removed.

Parameters
----------
x : int or str
    Node id
y : int or str
    Node id

Returns
-------
removed : bool
    Whether the arc x-y can be removed, this is equivalent to x and y being independent"
