%feature("docstring") OTAGRUM::ContinuousBayesianNetwork
"ContinuousBayesianNetwork distribution.

Parameters
----------
dag : :class:`~otagrum.NamedDAG`
    Underlying junction tree
jointDistributions : sequence of :py:class:`openturns.Distribution`
    Collection of joint distributions

Examples
--------
>>> import otagrum
>>> import openturns as ot
>>> import pyAgrum as gum
>>> bn = gum.BayesNet.fastPrototype('A->B->C->D;E->A->C<-E')
>>> ndag = otagrum.NamedDAG(bn)
>>> jointDistributions = []
>>> #distribution = otagrum.ContinuousBayesianNetwork(ndag, jointDistributions)"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousBayesianNetwork::getNamedDAG
"Accessor to the DAG.

Returns
-------
dag : :class:`~otagrum.NamedDAG`
    Underlying junction tree"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousBayesianNetwork::setDAGAndDistributionCollection
"Accessor to the DAG and distribution collection.

Parameters
----------
dag : :class:`~otagrum.NamedDAG`
    Underlying junction tree
jointDistributions : sequence of :py:class:`openturns.Distribution`
    Collection of joint distributions"

// ----------------------------------------------------------------------------

%feature("docstring") OTAGRUM::ContinuousBayesianNetwork::getDistributionCollection
"Distribution collection accessor.

Returns
-------
jointDistributions : sequence of :py:class:`openturns.Distribution`
    Collection of joint distributions
"
